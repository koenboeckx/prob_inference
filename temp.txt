"""
    def extended_graph(self):
        # definition of the (so far empty) factor graph
        g = FactorGraph()

        # declaration of the variables
        # arguments: name, # of possible values, value = ... if observed
        A = Variable('A', 2)
        B = Variable('B', 2)
        C = Variable('C', 2)
        D = Variable('D', 2)

        f1 = Factor('f1', np.array([
            [10, 1],
            [1, 10]
        ]))

        f2 = Factor('f2', np.array([
            [1, 10],
            [10, 1]
        ]))

        f3 = Factor('f3', np.array([
            [10, 1],
            [1, 10]
        ]))

        f4 = Factor('f4', np.array(
            [10, 1]
        ))

        g.add(f1)
        g.append(f1, A)
        g.append(f1, B)

        g.add(f2)
        g.append(f2, B)
        g.append(f2, C)

        g.add(f3)
        g.append(f3, B)
        g.append(f3, D)

        g.add(f4)
        g.append(f4, C)
        
        g.compute_messages()
        self.assertAlmostEqual(g.compute_marginal(A)[0], 0.22614576)
        self.assertAlmostEqual(g.compute_marginal(B)[0], 0.16528926)
        self.assertAlmostEqual(g.compute_marginal(C)[0], 0.90909091)
        self.assertAlmostEqual(g.compute_marginal(D)[0], 0.22614576)

    def extended_graph_with_evidence_1(self):
        # definition of the (so far empty) factor graph
        g = FactorGraph()

        # declaration of the variables
        # arguments: name, # of possible values, value = ... if observed
        A = Variable('A', 2)
        B = Variable('B', 2)
        C = Variable('C', 2, value=0)
        D = Variable('D', 2)

        f1 = Factor('f1', np.array([
            [10, 1],
            [1, 10]
        ]))

        f2 = Factor('f2', np.array([
            [1, 10],
            [10, 1]
        ]))

        f3 = Factor('f3', np.array([
            [10, 1],
            [1, 10]
        ]))

        f4 = Factor('f4', np.array(
            [10, 1]
        ))

        g.add(f1)
        g.append(f1, A)
        g.append(f1, B)

        g.add(f2)
        g.append(f2, B)
        g.append(f2, C)

        g.add(f3)
        g.append(f3, B)
        g.append(f3, D)

        g.add(f4)
        g.append(f4, C)
        
        g.compute_messages()
        self.assertAlmostEqual(g.compute_marginal(A)[0], 0.16528926)
        self.assertAlmostEqual(g.compute_marginal(B)[0], 0.09090909)
        self.assertAlmostEqual(g.compute_marginal(C)[0], 1.0)
        self.assertAlmostEqual(g.compute_marginal(D)[0], 0.16528926)

    def extended_graph_with_evidence_2(self):
        # definition of the (so far empty) factor graph
        g = FactorGraph()

        # declaration of the variables
        # arguments: name, # of possible values, value = ... if observed
        A = Variable('A', 2)
        B = Variable('B', 2, value=0)
        C = Variable('C', 2)
        D = Variable('D', 2)

        f1 = Factor('f1', np.array([
            [10, 1],
            [1, 10]
        ]))

        f2 = Factor('f2', np.array([
            [1, 10],
            [10, 1]
        ]))

        f3 = Factor('f3', np.array([
            [10, 1],
            [1, 10]
        ]))

        f4 = Factor('f4', np.array(
            [10, 1]
        ))

        g.add(f1)
        g.append(f1, A)
        g.append(f1, B)

        g.add(f2)
        g.append(f2, B)
        g.append(f2, C)

        g.add(f3)
        g.append(f3, B)
        g.append(f3, D)

        g.add(f4)
        g.append(f4, C)
        
        g.compute_messages()
        self.assertAlmostEqual(g.compute_marginal(A)[0], 0.90909091)
        self.assertAlmostEqual(g.compute_marginal(B)[0], 1.0)
        self.assertEqual(g.compute_marginal(C)[0], 1.0)
        self.assertAlmostEqual(g.compute_marginal(D)[0], 0.90909091)

"""